#!/usr/bin/env node

var program = require('commander');
var mkdirp = require('mkdirp');
var os = require('os');
var fs = require('fs');
var path = require('path');
var readline = require('readline');
var sortedObject = require('sorted-object');
var util = require('util');


//AOP函数
var around = require('../utils/aop.js').around;
var before = require('../utils/aop.js').before;
var confirm = require('../utils/aop.js').confirm;

//fun函数

var copy_template = require('../utils/funs.js').copy_template;
var createAppName = require('../utils/funs.js').createAppName;
var emptyDirectory = require('../utils/funs.js').emptyDirectory;
var loadTemplate = require('../utils/funs.js').loadTemplate;
var warning = require('../utils/funs.js').warning;
var write = require('../utils/funs.js').write;
var mkdir = require('../utils/funs.js').mkdir;
var renamedOption = require('../utils/funs.js').renamedOption;
var exit = require('../utils/funs.js').exit;
var launchedFromCmd = require('../utils/funs.js').launchedFromCmd;
var createApplication = require('../utils/funs.js').createApplication;


var _exit = process.exit; //退出程序,_exit备份原生的process.exit，下面21行要重写process.exit
var eol = os.EOL;
var pkg = require('../package.json');

var version = pkg.version;

// Re-assign process.exit because of commander
// TODO: Switch to a different command framework

process.exit = exit //exit是下面定义的函数，重新定义了process.exit

// CLI
//AOP编程，给program加调料。。。。
around(program, 'optionMissingArgument', function (fn, args) {//program.optionMissingArgument , args(参数数组),暂时没有调用
  program.outputHelp()
  fn.apply(this, args)
  return { args: [], unknown: [] }
})

before(program, 'outputHelp', function () {//绑定 program.outputHelp 
  // track if help was shown for unknown option
  this._helpShown = true
});

before(program, 'unknownOption', function () {//绑定 program.unknownOption
  // allow unknown options if help was shown, to prevent trailing error
  this._allowUnknownOption = this._helpShown

  // show help if not yet shown
  if (!this._helpShown) {
    program.outputHelp()
  }
})
//命令行菜单
program
  .version(version, '    --version')
  .usage('[options] [dir]')
  .option('    --git', 'add .gitignore')
  .option('-f, --force', 'force on non-empty directory')
  .parse(process.argv);

if (!exit.exited) { //退出，貌似是由于win下面的一个bug，之后再看issue
  main(); //开始执行
}

/**
 * Main program.
 */

function main() {
  // Path
  var destinationPath = program.args.shift() || '.';//获取第一个参数为appname

  // App name
  var appName = createAppName(path.resolve(destinationPath)) || 'hello-world'//将当前路径传过去

  // Generate application 创建应用
  emptyDirectory(destinationPath, function (empty) {
    if (empty || program.force) { //如果目录为空，或者强行在非空目录下建立app，居然要考虑这么多场景，还真是经验。
      createApplication(appName, destinationPath,program);
    } else {
      confirm('destination is not empty, continue? [y/N] ', function (ok) {
        if (ok) {
          process.stdin.destroy();
          createApplication(appName, destinationPath,program);
        } else {//退出
          console.error('aborting');
          exit(1);
        }
      });
    }
  });
}